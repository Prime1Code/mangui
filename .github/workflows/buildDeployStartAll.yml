name: Build-Deploy-Start-All

on:
  push:
    branches: [ "master" ]
    #  pull_request:
    #    branches: [ "master" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  backend:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Build with Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: 7.3
          arguments: bootJar
      - name: Deploy to server
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.REMOTE_SSH_KEY }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          SOURCE: "build/libs/"
          TARGET: ${{ secrets.REMOTE_TARGET_BACKEND }}

  frontend:
    needs: backend
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./frontend

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js lts/iron
        uses: actions/setup-node@v4
        with:
          node-version: lts/iron
          check-latest: true
          cache: 'npm'
          cache-dependency-path: "./frontend/package-lock.json"
      - run: npm ci #--legacy-peer-deps
      - run: CI=true npm run build --if-present
      - name: Deploy to server
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.REMOTE_SSH_KEY }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          SOURCE: "frontend/build"
          TARGET: ${{ secrets.REMOTE_TARGET_FRONTEND }}

  start:
    needs: frontend
    runs-on: ubuntu-latest

    steps:
      - name: SSH Remote Commands
        uses: appleboy/ssh-action@v1.0.3
        with:
          key: ${{ secrets.REMOTE_SSH_KEY }}
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          script: |
            ./createDockerImagesAndRun.sh
